diff --git a/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution.ts b/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution.ts
index 3ef5ca1..a634a9f 100644
--- a/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution.ts
+++ b/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution.ts
@@ -301,2 +301,8 @@ configurationRegistry.registerConfiguration({
 		},
+		'workbench.welcomePage.extraAnnouncements': {
+			scope: ConfigurationScope.MACHINE,
+			type: 'boolean',
+			default: true,
+			description: localize('workbench.welcomePage.extraAnnouncements', "When enabled, the get started page loads additional announcements from VSCodium's repository.")
+		},
 		'workbench.startupEditor': {
diff --git a/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts b/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts
index fc7248a2d58..746a64370d0 100644
--- a/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts
+++ b/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts
@@ -116,8 +116,10 @@ type GettingStartedActionEvent = {
 };

 type RecentEntry = (IRecentFolder | IRecentWorkspace) & { id: string };
+type AnnouncementEntry = { id: string; title: string; url: string };

 const REDUCED_MOTION_KEY = 'workbench.welcomePage.preferReducedMotion';
+const BUILTIN_ANNOUNCEMENTS: AnnouncementEntry[] = [/* BUILTIN_ANNOUNCEMENTS */];
 export class GettingStartedPage extends EditorPane {

 	public static readonly ID = 'gettingStartedPage';
@@ -150,6 +152,8 @@ export class GettingStartedPage extends EditorPane {
 	private recentlyOpenedList?: GettingStartedIndexList<RecentEntry>;
 	private startList?: GettingStartedIndexList<IWelcomePageStartEntry>;
 	private gettingStartedList?: GettingStartedIndexList<IResolvedWalkthrough>;
+	private announcementList?: GettingStartedIndexList<AnnouncementEntry>;
+	private announcementData?: AnnouncementEntry[];
 	private featuredExtensionsList?: GettingStartedIndexList<IFeaturedExtension>;

 	private stepsSlide!: HTMLElement;
@@ -824,6 +828,7 @@ export class GettingStartedPage extends EditorPane {
 		const recentList = this.buildRecentlyOpenedList();
 		const featuredExtensionList = this.buildFeaturedExtensionsList();
 		const gettingStartedList = this.buildGettingStartedWalkthroughsList();
+		const announcementList = await this.buildAnnouncementList();

 		const footer = $('.footer', {},
 			$('p.showOnStartup', {},
@@ -860,11 +865,11 @@ export class GettingStartedPage extends EditorPane {
 		const layoutRecentList = () => {
 			if (this.container.classList.contains('noWalkthroughs') && this.container.classList.contains('noExtensions')) {
 				recentList.setLimit(10);
-				reset(leftColumn, startList.getDomElement());
+				reset(leftColumn, startList.getDomElement(), announcementList.getDomElement());
 				reset(rightColumn, recentList.getDomElement());
 			} else {
 				recentList.setLimit(5);
-				reset(leftColumn, startList.getDomElement(), recentList.getDomElement());
+				reset(leftColumn, startList.getDomElement(), announcementList.getDomElement());
 			}
 		};

@@ -992,6 +997,59 @@ export class GettingStartedPage extends EditorPane {
 		return recentlyOpenedList;
 	}

+	private async buildAnnouncementList(): Promise<GettingStartedIndexList<AnnouncementEntry>> {
+		const renderAnnouncement = (announcement: AnnouncementEntry) => {
+			const { title, url } = announcement;
+			const li = $('li');
+
+			const anchor: HTMLLinkElement = $('a');
+			anchor.href = url;
+			anchor.innerText = title;
+			anchor.target = '_blank';
+			li.appendChild(anchor);
+
+			return li;
+		};
+
+		if (this.announcementList) { this.announcementList.dispose(); }
+
+		const announcementList = this.announcementList = new GettingStartedIndexList({
+			title: localize('announcements', "VSCodium Announcements"),
+			klass: 'announcements',
+			limit: 5,
+			empty: $('.empty-recent', {}, localize('noAnnouncements', "There are no current announcements.")),
+			renderElement: renderAnnouncement,
+			contextService: this.contextService
+		});
+
+		if (!this.announcementData) {
+			const showExtras = this.configurationService.getValue<boolean>('workbench.welcomePage.extraAnnouncements');
+
+			if (showExtras) {
+				const branch = this.productService.quality === 'insider' ? 'insider' : 'master';
+				await fetch(`https://raw.githubusercontent.com/VSCodium/vscodium/${branch}/announcements-extra.json`)
+					.then(async res => {
+						if (res.ok) {
+							var extraAnnouncements = await res.json() as AnnouncementEntry[];
+
+							this.announcementData = [...extraAnnouncements, ...BUILTIN_ANNOUNCEMENTS];
+						} else {
+							this.announcementData = BUILTIN_ANNOUNCEMENTS;
+						}
+					})
+					.catch(err => {
+						this.announcementData = BUILTIN_ANNOUNCEMENTS;
+					});
+			} else {
+				this.announcementData = BUILTIN_ANNOUNCEMENTS;
+			}
+		}
+
+		announcementList.setEntries(this.announcementData);
+
+		return announcementList;
+	}
+
 	private buildStartList(): GettingStartedIndexList<IWelcomePageStartEntry> {
 		const renderStartEntry = (entry: IWelcomePageStartEntry): HTMLElement =>
 			$('li',
